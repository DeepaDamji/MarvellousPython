import os;
import sys;
import time;
import psutil;
import smtplib;
import hashlib;
import schedule;
import re;
import user;
from datetime import datetime;
from urllib import request;
from email.mime.multipart import MIMEMultipart;
from email.mime.text import MIMEText;
from email.mime.base import MIMEBase;
from email import encoders;

def hashfile(directory,blocksize=1024):
	afile=open(directory,"rb");
	hasher=hashlib.md5()
	buf=afile.read(blocksize);
	while len(buf)>0:
		hasher.update(buf);
		buf=afile.read(blocksize);
	afile.close();
	return hasher.hexdigest();


def findDuplicate(path):
	flag=os.path.isabs(path);
	if flag==False:
		path=os.path.abspath(path);

	exists=os.path.isdir(path);

	data={};
	scannedcount=0;
	if exists:
		for folder, subfolder, files in os.walk(path):
			for file in files:
				npath=os.path.join(folder, file);
				file_hash=hashfile(npath);
				
				if file_hash in data:
					data[file_hash].append(npath);
				else:
					data[file_hash]=[npath];
				scannedcount+=1;
	else:
		print("Error: No Such Path Exists");
		exit();

	newdata=[];
	newdata=list(filter(lambda x: len(x)>1, data.values()));

	global logpath;
	logpath="Marvellous";
	try:
		os.mkdir(logpath);
	except Exception:
		pass;

	global filename;
	
	filename="Log.log";
	newpath=os.path.join(logpath, filename);
	fobj=open(newpath, "w+");

	line="_"*90;
	fobj.write(line+"\n");
	fobj.write("Deleted Files : %s\n"%time.ctime());
	fobj.write(line+"\n\n");
	
	dupcount=0;
	starttime=time.time();
	for outer in newdata:
		icnt=0;
		for inner in outer:
			icnt+=1;
			if icnt>=2:
				dupcount+=1;
				fobj.write("\n"+inner);
				os.remove(inner);

	fobj.write("\n\nTotal number of files deleted : "+str(dupcount));
	endtime=time.time();
	fobj.close();

	reqtime=endtime-starttime;
	mailSender(path, sys.argv[3], scannedcount, dupcount, datetime.now(), reqtime);
	

def is_connected():
	try:
		request.urlopen("https://gmail.com",timeout=1);
		return True;
	except request.URLError as err:
		return False;


def mailSender(path, toaddr, scannedcount, dupcount, starttime, reqtime):
	try:
		connected=is_connected();
		
		if connected:
			fromaddr=user.name();
			msg=MIMEMultipart();   
			msg['To']=toaddr;
			msg['From']=fromaddr;
			msg['Subject']="List of Duplicate Files in Directory: "+path;

			bodystart="Please find attached herewith list of duplicate file.\n\n";
			bodydata="Total number of files scanned: "+str(scannedcount)+"\nTotal number of duplicate files found: "+str(dupcount)+"\nStarting time of scanning: "+str(starttime)+"\nTime required to find duplicate files: "+str(reqtime);
			bodyend="\n\nThis mail is generated by Python Program.\n\n\nThanks and Regards\nDeepa Damji";
			body=bodystart+bodydata+bodyend;

			msg.attach(MIMEText(body,'plain'));
			
			newpath=os.path.join(logpath, filename);
			fobj=open(newpath, "r");
			
			attachment=open(newpath,"rb");
			p=MIMEBase('application','octate-stream');
			p.set_payload((attachment).read());
			encoders.encode_base64(p);
			p.add_header('Content-Disposition',"attachment; filename=%s" %filename);
			msg.attach(p);

			s=smtplib.SMTP('smtp.gmail.com', 587);
			s.starttls();
			
			s.login(fromaddr,user.password());
			text=msg.as_string();

			s.sendmail(fromaddr,toaddr,text);
			s.quit();

			print("Schedule Completed");			
			
		else:
			print("There is no internet connection");

	except Exception as e:
		print("Error: Invalid input in mail sender",e);
		exit();


def main():
	if len(sys.argv)>4 or len(sys.argv)<4:
		print("\nInvalid Argument");
		print("To know usage of program, use -u command\n");
		exit();

	if sys.argv[1] == "-h" or sys.argv[1] == "-H":
		print("\nThis is a scheduling program to send mail of duplicate files found in given directory");
		print("To know usage of program, use -u command\n");
		exit();

	if sys.argv[1] == "-u" or sys.argv[1] == "-U":
		print("\npython <program_name> <directory_name> <time_interval> <to_mail_address>");
		print("<program_name> : Name of program");
		print("<directory_name> : Directory to find duplicates within\n");
		print("<time_interval> : Duration in minutes to schedule same program to find duplicates again\n");
		print("<to_mail_address> : Email address to send log file\n");
		exit();

	else:
		print("_"*78);
		print("\nAuthor     : Program is Developed by Deepa Damji");
		print("Description: Scheduling program to send mail of duplicate files found in given directory ");
		print("Date & Time: 2019-12-14 04:00:00");
		print("_"*78,"\n");

		checktime=re.findall("\\d",sys.argv[2]);
		if checktime:
			checkemail=re.findall("[\\w._%+-]+@[\\w.-]+\\.[a-z|A-Z]{2,4}",sys.argv[3]);
			if checkemail:
				schedule.every(int(sys.argv[2])).minutes.do(findDuplicate, path=sys.argv[1])
			else:
				print("Error: Invalid Mail ID");
				exit();
		else:
				print("Error: Invalid Time Interval");
				exit();

		readme=open("ReadMe.txt","w");
		readme.write("# Remove Duplicate File\n\nThis is a Python program for dealing with duplicate files.\n\n\n## Usage\n\nUse 'python <program_name>.py -u' command.\n\n\n##Help\n\nUse 'python <program_name>.py -h' command.\n\n\n## License\n[DeepaDamji](https://github.com/DeepaDamji/MarvellousPython/)");
		readme.close();

		while True:
			schedule.run_pending();
			time.sleep(1);
	

if __name__== "__main__":
	main();